<!DOCTYPE html>
<html lang="en">

<head>
  <%~ includeFile('../components/head', it) %>
</head>

<body>
  <%~ includeFile('../components/header', it) %>
    <main>
      <details id="sendas">
        <summary>💬 send message as griffbot</summary>
        <form id="send">
          <label for="channel">channel</label>
          <input type="number" name="channel" id="channel" value="<%= process.env.GENERAL_CHANNEL_ID %>">
          <label for="message">content</label>
          <textarea id="message" name="message" placeholder="Enter your message here"></textarea>
          <details id="embed" style="margin-left: 15px;">
            <summary>✨Embed</summary>
            <button style="display: block; margin: 10px 0px;" id="fill-embed">fill with JSON</button>
            <textarea id="message-embed" name="message-embed" placeholder="Enter your embed JSON here" rows="10">[]</textarea>
          </details>
          <input type="submit" value="send">
        </form>
      </details>
      <details id="stats">
        <summary>📈 stats</summary>
        <ul>
          <li>total verified users: <%= it.userCount %></li>
          <li>total infractions: <%= it.infractionCount %></li>
          <li>uptime: <%= process.uptime() %></li>
          <li>next cleanup: <%= it.jobData.next %></li>
          <li>last cleanup: <%= it.jobData.last %></li>
          <li>cleanup running?: <%= it.jobData.locked %></li>
          <li>pingers: <%= JSON.stringify(it.pingers) %>          
            <button id="add-pinger">add pinger</button>
            <button id="remove-pinger">remove pinger</button>
          </li>
        </ul>
        <blockquote>
          <p>(the cleanup is the process that verifies that only verified users have the role. it runs every <%= it.jobData.interval %>)</p>
        </blockquote>
      </details>
      <details id="infractions">
        <summary>⚖️ infractions</summary>
        <a href="/dashboard/infractions">list all infractions</a>
        <hr>
        <b>5 latest infractions</b>
        <ul>
          <% it.recentInfractions.forEach(function(infraction){ %>
            <li>
              <a href="/dashboard/infractions/<%= infraction._id %>"><%= infraction.userDiscord.tag %>: <%= infraction.message %></a>
            </li>
          <% }) %>
        </ul>
      </details>
      <details id="db">
        <summary>🔨 user admin</summary>
        <a href="/dashboard/list">list all users</a>
        <!-- <a href="/dashboard/list">something else</a> -->
        <hr>
        <div>
          <b>find user by scratch name</b>
          <form action="/dashboard/search-scratch" method="get">
            <label for="user">username:</label>
            <input type="text" name="username" id="username">
            <input type="submit" value="get">
          </form>
          <b>find user by discord id</b>
          <form action="/dashboard/search-discord" method="get">
            <label for="user">id:</label>
            <input type="text" name="user" id="user">
            <input type="submit" value="get">
          </form>
        </div>
      </details>
      <details id="config">
        <summary>📝 configure griffbot</summary>
        <ul>
          <% for (const [key, value] of Object.entries(it.config)) { %>
            <li>
              <%= it.configMap[key] || key %>: <%= value %>
              <button id="edit-config" data-config="<%= key %>">📝</button>
            </li>
          <% } %>
        </ul>
      </details>
    </main>
</body>
<script>
  const send = document.getElementById('send');
  const channel = document.getElementById('channel');
  const message = document.getElementById('message');
  const messageEmbed = document.getElementById('message-embed');
  const fillEmbedButton = document.getElementById('fill-embed');

  fillEmbedButton.addEventListener('click', (e) => {
    e.preventDefault();
    messageEmbed.value = JSON.stringify([{
      title: 'test',
      description: 'test',
      color: '#00a9c0',
    }], null, 2);
  })

  send.addEventListener('submit', async (e) => {
    e.preventDefault();
    const data = {
      channel: channel.value,
      message: message.value,
      embed: messageEmbed.value || "[]"
    };
    let response = await fetch('/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    }).then(res => res.json())

    if (response.success) {
      message.value = '';
      // channel.value = '';
    } else {
      alert(response.error);
    }
  });

  // pinger stuff:

  const addPinger = document.getElementById('add-pinger');
  const removePinger = document.getElementById('remove-pinger');

  addPinger.addEventListener('click', async () => {
    let id = prompt('enter the id of the user you want to add as a pinger');

    if (id) {
      let response = await fetch('/pinger/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          pinger: id
        })
      }).then(res => res.json())
      window.location.reload()
    }
  })

  removePinger.addEventListener('click', async () => {
    let id = prompt('enter the id of the user you want to remove from the pinger list');

    if (id) {
      let response = await fetch('/pinger/remove', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          pinger: id
        })
      }).then(res => res.json())
      window.location.reload()
    }
  })

  // config stuff:

  const editButtons = document.querySelectorAll('#edit-config');

  editButtons.forEach(async function (button) {
    button.addEventListener('click', async function (event) {
      let setting = event.target.dataset.config;

      let value = prompt('enter the new value for ' + setting);

      if (value) {
        let response = await fetch('/config/edit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            setting: setting,
            value: value
          })
        }).then(res => res.json())
        window.location.reload()
      }
    })
  })

  // detail manager:

  // add event listeners to all the details elements

  const details = document.querySelectorAll('details');

  details.forEach(detail => {
    detail.addEventListener('toggle', (e) => {
      rememberDetails()
    });
  });

  function rememberDetails() {
    // store the current open detail elements in local storage
    const details = document.querySelectorAll('details');

    const openDetails = []

    details.forEach(detail => {
      if (detail.open) {
        openDetails.push(detail.id)
      }
    });

    console.log(openDetails);

    localStorage.setItem('openDetails', openDetails.join(','));
  }

  // restore the open details from local storage
  const openDetails = localStorage.getItem('openDetails');

  if (openDetails) {
    const details = document.querySelectorAll('details');

    openDetails.split(',').forEach(id => {
      details.forEach(detail => {
        if (detail.id === id) {
          detail.open = true;
        }
      });
    });
  }

  // this is such a hack!
</script>

</html>